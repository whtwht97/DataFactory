{
	"name": "dataflow_wwi_ods_to_integration",
	"properties": {
		"folder": {
			"name": "dataflow_wwi"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_wwiods_customers_parquet",
						"type": "DatasetReference"
					},
					"name": "CustomersParquet"
				},
				{
					"dataset": {
						"referenceName": "ds_wwiods_people_parquet",
						"type": "DatasetReference"
					},
					"name": "PeopleParquet"
				},
				{
					"dataset": {
						"referenceName": "ds_wwiods_invoices_parquet",
						"type": "DatasetReference"
					},
					"name": "InvoicesParquet"
				},
				{
					"dataset": {
						"referenceName": "ds_wwiods_orderlines_parquet",
						"type": "DatasetReference"
					},
					"name": "OrderLinesParquet"
				},
				{
					"dataset": {
						"referenceName": "ds_wwiods_orders_parquet",
						"type": "DatasetReference"
					},
					"name": "OrdersParquet"
				},
				{
					"dataset": {
						"referenceName": "ds_wwiods_stockitems_parquet",
						"type": "DatasetReference"
					},
					"name": "StockItems"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_wwiInte_customers_parquet",
						"type": "DatasetReference"
					},
					"name": "sinkCustomers"
				},
				{
					"dataset": {
						"referenceName": "ds_wwiInte_employee_parquet",
						"type": "DatasetReference"
					},
					"name": "sinkEmployee"
				},
				{
					"dataset": {
						"referenceName": "ds_wwiInte_stockitems_parquet",
						"type": "DatasetReference"
					},
					"name": "sinkStockitems"
				},
				{
					"dataset": {
						"referenceName": "ds_wwiInte_orders_parquet",
						"type": "DatasetReference"
					},
					"name": "sinkOrdersFact"
				},
				{
					"dataset": {
						"referenceName": "ds_wwiInte_sales_parquet",
						"type": "DatasetReference"
					},
					"name": "sinkSalesFact"
				}
			],
			"transformations": [
				{
					"name": "joinPeople"
				},
				{
					"name": "selectCustomers"
				},
				{
					"name": "joinBillCustomers"
				},
				{
					"name": "selectCustomersInte"
				},
				{
					"name": "filterEmployee"
				},
				{
					"name": "selectEmployee"
				},
				{
					"name": "selectStockitems"
				},
				{
					"name": "selectOrders"
				},
				{
					"name": "selectOrderLines"
				},
				{
					"name": "joinOrdersFact"
				},
				{
					"name": "selectOrdersFact"
				},
				{
					"name": "selectSales"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          BillToCustomerID as integer,",
				"          CustomerCategoryID as integer,",
				"          BuyingGroupID as integer,",
				"          PrimaryContactPersonID as integer,",
				"          AlternateContactPersonID as integer,",
				"          DeliveryMethodID as integer,",
				"          DeliveryCityID as integer,",
				"          PostalCityID as integer,",
				"          CreditLimit as decimal(18,2),",
				"          AccountOpenedDate as date,",
				"          StandardDiscountPercentage as decimal(18,3),",
				"          IsStatementSent as boolean,",
				"          IsOnCreditHold as boolean,",
				"          PaymentDays as integer,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          DeliveryRun as string,",
				"          RunPosition as string,",
				"          WebsiteURL as string,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as string,",
				"          DeliveryLocation as string,",
				"          PostalAddressLine1 as string,",
				"          PostalAddressLine2 as string,",
				"          PostalPostalCode as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> CustomersParquet",
				"source(output(",
				"          PersonID as integer,",
				"          FullName as string,",
				"          PreferredName as string,",
				"          SearchName as string,",
				"          IsPermittedToLogon as boolean,",
				"          LogonName as string,",
				"          IsExternalLogonProvider as boolean,",
				"          HashedPassword as binary,",
				"          IsSystemUser as boolean,",
				"          IsEmployee as boolean,",
				"          IsSalesperson as boolean,",
				"          UserPreferences as string,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          EmailAddress as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          OtherLanguages as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PeopleParquet",
				"source(output(",
				"          InvoiceID as integer,",
				"          CustomerID as integer,",
				"          BillToCustomerID as integer,",
				"          OrderID as integer,",
				"          DeliveryMethodID as integer,",
				"          ContactPersonID as integer,",
				"          AccountsPersonID as integer,",
				"          SalespersonPersonID as integer,",
				"          PackedByPersonID as integer,",
				"          InvoiceDate as date,",
				"          CustomerPurchaseOrderNumber as string,",
				"          IsCreditNote as boolean,",
				"          CreditNoteReason as string,",
				"          Comments as string,",
				"          DeliveryInstructions as string,",
				"          InternalComments as string,",
				"          TotalDryItems as integer,",
				"          TotalChillerItems as integer,",
				"          DeliveryRun as string,",
				"          RunPosition as string,",
				"          ReturnedDeliveryData as string,",
				"          ConfirmedDeliveryTime as timestamp,",
				"          ConfirmedReceivedBy as string,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> InvoicesParquet",
				"source(output(",
				"          OrderLineID as integer,",
				"          OrderID as integer,",
				"          StockItemID as integer,",
				"          Description as string,",
				"          PackageTypeID as integer,",
				"          Quantity as integer,",
				"          UnitPrice as decimal(18,2),",
				"          TaxRate as decimal(18,3),",
				"          PickedQuantity as integer,",
				"          PickingCompletedWhen as timestamp,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OrderLinesParquet",
				"source(output(",
				"          OrderID as integer,",
				"          CustomerID as integer,",
				"          SalespersonPersonID as integer,",
				"          PickedByPersonID as integer,",
				"          ContactPersonID as integer,",
				"          BackorderOrderID as integer,",
				"          OrderDate as date,",
				"          ExpectedDeliveryDate as date,",
				"          CustomerPurchaseOrderNumber as string,",
				"          IsUndersupplyBackordered as boolean,",
				"          Comments as string,",
				"          DeliveryInstructions as string,",
				"          InternalComments as string,",
				"          PickingCompletedWhen as timestamp,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OrdersParquet",
				"source(output(",
				"          StockItemID as integer,",
				"          StockItemName as string,",
				"          SupplierID as integer,",
				"          ColorID as integer,",
				"          UnitPackageID as integer,",
				"          OuterPackageID as integer,",
				"          Brand as string,",
				"          Size as string,",
				"          LeadTimeDays as integer,",
				"          QuantityPerOuter as integer,",
				"          IsChillerStock as boolean,",
				"          Barcode as string,",
				"          TaxRate as decimal(18,3),",
				"          UnitPrice as decimal(18,2),",
				"          RecommendedRetailPrice as decimal(18,2),",
				"          TypicalWeightPerUnit as decimal(18,3),",
				"          MarketingComments as string,",
				"          InternalComments as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          Tags as string,",
				"          SearchDetails as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> StockItems",
				"CustomersParquet, PeopleParquet join(PrimaryContactPersonID == PersonID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinPeople",
				"joinPeople select(mapColumn(",
				"          CustomerID,",
				"          CustomerName,",
				"          BillToCustomerID,",
				"          CustomerCategoryID,",
				"          BuyingGroupID,",
				"          PostalCode = DeliveryPostalCode,",
				"          ValidFrom = CustomersParquet@ValidFrom,",
				"          ValidTo = CustomersParquet@ValidTo,",
				"          {Primary Contact} = FullName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCustomers",
				"selectCustomers, CustomersParquet join(selectCustomers@BillToCustomerID == CustomersParquet@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinBillCustomers",
				"joinBillCustomers select(mapColumn(",
				"          WWICustomerID = selectCustomers@CustomerID,",
				"          Customer = selectCustomers@CustomerName,",
				"          BillToCustomerID = selectCustomers@BillToCustomerID,",
				"          BillToCustomer = CustomersParquet@CustomerName,",
				"          CustomerCategoryID = selectCustomers@CustomerCategoryID,",
				"          BuyingGroupID = selectCustomers@BuyingGroupID,",
				"          PostalCode,",
				"          ValidFrom = selectCustomers@ValidFrom,",
				"          ValidTo = selectCustomers@ValidTo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCustomersInte",
				"PeopleParquet filter(IsEmployee == true()) ~> filterEmployee",
				"filterEmployee select(mapColumn(",
				"          WWIPersonID = PersonID,",
				"          Employee = FullName,",
				"          PreferredName,",
				"          IsSalesperson,",
				"          PhoneNumber,",
				"          Photo,",
				"          ValidFrom,",
				"          ValidTo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectEmployee",
				"StockItems select(mapColumn(",
				"          WWIStockItemID = StockItemID,",
				"          StockItem = StockItemName,",
				"          ColorID,",
				"          UnitPackageID,",
				"          OuterPackageID,",
				"          Brand,",
				"          Size,",
				"          LeadTimeDays,",
				"          QuantityPerOuter,",
				"          IsChillerStock,",
				"          Barcode,",
				"          TaxRate,",
				"          UnitPrice,",
				"          RecommendedRetailPrice,",
				"          TypicalWeightPerUnit,",
				"          Photo,",
				"          ValidFrom,",
				"          ValidTo",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectStockitems",
				"OrdersParquet select(mapColumn(",
				"          OrderID1 = OrderID,",
				"          CustomerID,",
				"          SalespersonPersonID,",
				"          PickedByPersonID,",
				"          BackorderOrderID,",
				"          OrderDate,",
				"          PickingCompletedWhen,",
				"          LastEditedWhen",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectOrders",
				"OrderLinesParquet select(mapColumn(",
				"          OrderLineID,",
				"          OrderID,",
				"          StockItemID,",
				"          Description,",
				"          PackageTypeID,",
				"          Quantity,",
				"          UnitPrice,",
				"          TaxRate,",
				"          LastEditedBy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectOrderLines",
				"selectOrderLines, selectOrders join(OrderID == OrderID1,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinOrdersFact",
				"joinOrdersFact select(mapColumn(",
				"          WWIOrderLineID = OrderLineID,",
				"          WWIOrderID = OrderID,",
				"          CustomerKey = CustomerID,",
				"          StockItemKey = StockItemID,",
				"          OrderDate,",
				"          PickedDate = PickingCompletedWhen,",
				"          SalespersonKey = SalespersonPersonID,",
				"          PickerKey = PickedByPersonID,",
				"          WWIBackorderID = BackorderOrderID,",
				"          PackageTypeKey = PackageTypeID,",
				"          Description,",
				"          UnitPrice,",
				"          Quantity,",
				"          TaxRate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectOrdersFact",
				"InvoicesParquet select(mapColumn(",
				"          InvoiceID,",
				"          CustomerID,",
				"          BillToCustomerID,",
				"          OrderID,",
				"          DeliveryMethodID,",
				"          ContactPersonID,",
				"          AccountsPersonID,",
				"          SalespersonPersonID,",
				"          PackedByPersonID,",
				"          InvoiceDate,",
				"          CustomerPurchaseOrderNumber,",
				"          IsCreditNote,",
				"          CreditNoteReason,",
				"          Comments,",
				"          DeliveryInstructions,",
				"          InternalComments,",
				"          TotalDryItems,",
				"          ReturnedDeliveryData,",
				"          ConfirmedDeliveryTime,",
				"          ConfirmedReceivedBy,",
				"          LastEditedBy,",
				"          LastEditedWhen",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSales",
				"selectCustomersInte sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerID as integer,",
				"          CustomerName as string,",
				"          BillToCustomerID as integer,",
				"          CustomerCategoryID as integer,",
				"          BuyingGroupID as integer,",
				"          PrimaryContactPersonID as integer,",
				"          AlternateContactPersonID as integer,",
				"          DeliveryMethodID as integer,",
				"          DeliveryCityID as integer,",
				"          PostalCityID as integer,",
				"          CreditLimit as decimal(18,2),",
				"          AccountOpenedDate as date,",
				"          StandardDiscountPercentage as decimal(18,3),",
				"          IsStatementSent as boolean,",
				"          IsOnCreditHold as boolean,",
				"          PaymentDays as integer,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          DeliveryRun as string,",
				"          RunPosition as string,",
				"          WebsiteURL as string,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as string,",
				"          DeliveryLocation as string,",
				"          PostalAddressLine1 as string,",
				"          PostalAddressLine2 as string,",
				"          PostalPostalCode as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkCustomers",
				"selectEmployee sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkEmployee",
				"selectStockitems sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkStockitems",
				"selectOrdersFact sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkOrdersFact",
				"selectSales sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkSalesFact"
			]
		}
	}
}