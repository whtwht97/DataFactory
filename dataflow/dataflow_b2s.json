{
	"name": "dataflow_b2s",
	"properties": {
		"folder": {
			"name": "dataflow_movie"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_movie_bronze_parquet",
						"type": "DatasetReference"
					},
					"name": "bronzeParquet"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_movie_silver_parquet",
						"type": "DatasetReference"
					},
					"name": "cleanSilver"
				},
				{
					"dataset": {
						"referenceName": "ds_movie_bronze_parquet",
						"type": "DatasetReference"
					},
					"name": "bronzeUpdate"
				},
				{
					"dataset": {
						"referenceName": "ds_orilanguage_silver_parquet",
						"type": "DatasetReference"
					},
					"name": "languageSilver"
				},
				{
					"dataset": {
						"referenceName": "ds_genre_silver_parquet",
						"type": "DatasetReference"
					},
					"name": "genresSilver"
				},
				{
					"dataset": {
						"referenceName": "ds_movie_genres_silver_parquet",
						"type": "DatasetReference"
					},
					"name": "sinkJunctionMoviesGenres"
				}
			],
			"transformations": [
				{
					"name": "filterStatusNew"
				},
				{
					"name": "split1"
				},
				{
					"name": "changeStatusPostive"
				},
				{
					"name": "changeStatusNegative"
				},
				{
					"name": "unionPN"
				},
				{
					"name": "selectSilver"
				},
				{
					"name": "selectLangague"
				},
				{
					"name": "aggregateLanguage"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "flattenGenres"
				},
				{
					"name": "aggrGenres"
				},
				{
					"name": "selectGenres"
				},
				{
					"name": "selectJunction"
				},
				{
					"name": "flattenJunction"
				},
				{
					"name": "junctionMoviesGenres"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as short,",
				"          Title as string,",
				"          Overview as string,",
				"          OriginalLanguage as string,",
				"          Price as double,",
				"          ReleaseDate as string,",
				"          Budget as double,",
				"          Revenue as double,",
				"          RunTime as short,",
				"          Tagline as string,",
				"          ImdbUrl as string,",
				"          TmdbUrl as string,",
				"          PosterUrl as string,",
				"          BackdropUrl as string,",
				"          CreatedDate as string,",
				"          CreatedBy as string,",
				"          UpdatedDate as string,",
				"          UpdatedBy as string,",
				"          genres as (id as short, name as string)[],",
				"          Status as string,",
				"          ingestTime as timestamp,",
				"          ingestDate as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> bronzeParquet",
				"bronzeParquet filter(Status=='New') ~> filterStatusNew",
				"filterStatusNew split(RunTime>=0,",
				"     disjoint: false) ~> split1@(runtimePostive, runtimeNegative)",
				"split1@runtimePostive derive(Status = 'Loaded') ~> changeStatusPostive",
				"split1@runtimeNegative derive(Status = 'Quarantined') ~> changeStatusNegative",
				"changeStatusPostive, changeStatusNegative union(byName: true)~> unionPN",
				"changeStatusPostive select(mapColumn(",
				"          Id,",
				"          Title,",
				"          Overview,",
				"          OriginalLanguage,",
				"          Price,",
				"          ReleaseDate,",
				"          Budget,",
				"          Revenue,",
				"          RunTime,",
				"          Tagline,",
				"          ImdbUrl,",
				"          TmdbUrl,",
				"          PosterUrl,",
				"          BackdropUrl,",
				"          CreatedDate,",
				"          CreatedBy,",
				"          UpdatedDate,",
				"          UpdatedBy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSilver",
				"bronzeParquet select(mapColumn(",
				"          OriginalLanguage",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectLangague",
				"selectLangague aggregate(groupBy(OriginalLanguage),",
				"     each(match(name!='OriginalLanguage'), $$ = first($$))) ~> aggregateLanguage",
				"aggregateLanguage keyGenerate(output(LanguageCode as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"selectGenres foldDown(unroll(genres),",
				"     mapColumn(",
				"          genres_id = genres.id,",
				"          name = genres.name",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenGenres",
				"flattenGenres aggregate(groupBy(name),",
				"     each(match(name!='name'), $$ = first($$))) ~> aggrGenres",
				"bronzeParquet select(mapColumn(",
				"          genres",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectGenres",
				"bronzeParquet select(mapColumn(",
				"          Id,",
				"          genres",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectJunction",
				"selectJunction foldDown(unroll(genres),",
				"     mapColumn(",
				"          Id,",
				"          genres_id = genres.id,",
				"          name = genres.name",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenJunction",
				"flattenJunction select(mapColumn(",
				"          movie_Id = Id,",
				"          genres_Id = genres_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> junctionMoviesGenres",
				"selectSilver sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cleanSilver",
				"unionPN sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> bronzeUpdate",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> languageSilver",
				"aggrGenres sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> genresSilver",
				"junctionMoviesGenres sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkJunctionMoviesGenres"
			]
		}
	}
}